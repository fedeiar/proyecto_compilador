.CODE

PUSH simple_heap_init 
CALL
PUSH lmain@@Init
CALL
HALT

simple_heap_init: 
RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP	; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP	; hl
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro



.DATA
VT_Init: NOP

.CODE
lmet1@char$char$int@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 3 ; Retorna de la unidad liberando n lugares en la pila

lmain@@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
RMEM 1 ; Reservamos un lugar para declaracion de variable local
PUSH 3 ; Apilo un literal entero
STORE 0 ; almaceno el valor de la expresion en la variable local
RMEM 1 ; Reservamos un lugar para declaracion de variable local
PUSH 'a' ; Apilo un literal caracter
STORE -1 ; almaceno el valor de la expresion en la variable local
RMEM 1
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD 0 ; Apilo el valor de la variable local o parametro
PUSH lmet1@char$char$int@Init
CALL
POP ; La llamada devolvio un valor que no fue asignado en ninguna variable, debe descartarse para no afectar el .stack
RMEM 1
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD 0 ; Apilo el valor de la variable local o parametro
PUSH lmet1@char$char$int@Init
CALL
POP ; La llamada devolvio un valor que no fue asignado en ninguna variable, debe descartarse para no afectar el .stack
RMEM 1
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD -1 ; Apilo el valor de la variable local o parametro
LOAD 0 ; Apilo el valor de la variable local o parametro
PUSH lmet1@char$char$int@Init
CALL
POP ; La llamada devolvio un valor que no fue asignado en ninguna variable, debe descartarse para no afectar el .stack
PUSH 77 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 2 ; Liberamos las variables locales utilizadas
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lInit@@:
NOP


.DATA
VT_Object: NOP

.CODE
ldebugPrint@int@Object:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lObject@@:
NOP


.DATA
VT_System: NOP

.CODE
lread@@System:
LOADFP
LOADSP
STOREFP
READ    ; Lectura de un valor entero
STORE 3 ; Ponemos el tope de la pila en la locación reservada. En 1 esta ED y en 2 PR, no hay this ni parametros
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lprintCln@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintC@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintBln@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintI@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintIln@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintSln@String@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1

lprintB@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintS@String@System:
LOADFP
LOADSP
STOREFP
STOREFP
RET 1

lprintln@@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lSystem@@:
NOP


