.CODE

PUSH simple_heap_init 
CALL
PUSH lmain@@Init
CALL
HALT

simple_heap_init: 
RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP	; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP	; hl
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro




.DATA
VT_A1: NOP

.CODE
lA1@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_A: DW lmet1A@@A

.CODE
lmet1A@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 8 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 1 ; Guardo el valor de la expresión en el atributo
PUSH 10 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 2 ; Guardo el valor de la expresión en el atributo
LOAD 3 ; Apilo this en la pila
LOADREF 3 ; Apilo el valor del atributo en la pila
PUSH lprintSln@String@System ; Pongo la etiqueta del metodo
CALL
LOAD 3 ; Apilo this en la pila
LOADREF 1 ; Apilo el valor del atributo en la pila
LOAD 3 ; Apilo this en la pila
LOADREF 2 ; Apilo el valor del atributo en la pila
ADD
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lA@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_Init: NOP

.CODE
lmain@@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v1
RMEM 1 ; Reservamos memoria para el resultado del malloc (la referencia al nuevo CIR del objeto que crearemos)
PUSH 8 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT que sera el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_C ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto porque sera tanto el resultado del constructor como la referencia a this dentro de la ejecucion del constructor
PUSH lC@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 0 ; almaceno el valor de la expresion en la variable local v1
LOAD 0 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
FMEM 1 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lInit@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_B: DW lmet1A@@A,lmet1B@@B

.CODE
lmet1B@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 'b' ; Apilo un literal caracter
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 6 ; Guardo el valor de la expresión en el atributo
RMEM 1 ; Reservo memoria para el puntero al comienzo del String que se almacenara en .HEAP
PUSH 8 ; Parametro del malloc. Reservo n + 1 lugares en el heap, donde n es la cantidad de letras del String y +1 para el caracter terminador (valor 0)
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'b' ; apilo la letra i-esima del string en HEAP
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'u' ; apilo la letra i-esima del string en HEAP
STOREREF 1 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'e' ; apilo la letra i-esima del string en HEAP
STOREREF 2 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'n' ; apilo la letra i-esima del string en HEAP
STOREREF 3 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'a' ; apilo la letra i-esima del string en HEAP
STOREREF 4 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 's' ; apilo la letra i-esima del string en HEAP
STOREREF 5 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH '!' ; apilo la letra i-esima del string en HEAP
STOREREF 6 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 0 ; Apilo el caracter terminador
STOREREF 7 ; Guardo el caracter terminador en el heap. Indica que es el fin del String
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 3 ; Guardo el valor de la expresión en el atributo
LOAD 3
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
LOAD 3 ; Apilo this en la pila
LOADREF 5 ; Apilo el valor del atributo en la pila
PUSH lprintCln@char@System ; Pongo la etiqueta del metodo
CALL
LOAD 3 ; Apilo this en la pila
LOADREF 6 ; Apilo el valor del atributo en la pila
PUSH lprintCln@char@System ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lB@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_C: DW lmet1A@@A,lmet1B@@B,lmet1C@@C

.CODE
lmet1C@@C:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 'a' ; Apilo un literal caracter
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 5 ; Guardo el valor de la expresión en el atributo
RMEM 1 ; Reservo memoria para el puntero al comienzo del String que se almacenara en .HEAP
PUSH 6 ; Parametro del malloc. Reservo n + 1 lugares en el heap, donde n es la cantidad de letras del String y +1 para el caracter terminador (valor 0)
PUSH simple_malloc
CALL
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'c' ; apilo la letra i-esima del string en HEAP
STOREREF 0 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'h' ; apilo la letra i-esima del string en HEAP
STOREREF 1 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'a' ; apilo la letra i-esima del string en HEAP
STOREREF 2 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 'u' ; apilo la letra i-esima del string en HEAP
STOREREF 3 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH '!' ; apilo la letra i-esima del string en HEAP
STOREREF 4 ; Guardo la letra apilada
DUP ; Duplico la referencia del comienzo del String ya que STOREREF la consumira para almacenar el proximo caracter
PUSH 0 ; Apilo el caracter terminador
STOREREF 5 ; Guardo el caracter terminador en el heap. Indica que es el fin del String
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y la referencia al CIR en tope - 1
STOREREF 7 ; Guardo el valor de la expresión en el atributo
LOAD 3
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 1 ; Cargo el metodo con su offset en la VT
CALL
LOAD 3 ; Apilo this en la pila
LOADREF 7 ; Apilo el valor del atributo en la pila
PUSH lprintSln@String@System ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lC@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_Object: NOP

.CODE
ldebugPrint@int@Object:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lObject@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



.DATA
VT_System: NOP

.CODE
lread@@System:
LOADFP
LOADSP
STOREFP
READ    ; Lectura de un digito entero
PUSH 48 ; Apilamos un 48 para restarselo al ASCII del digito y así obtener el número
SUB
STORE 3 ; Ponemos el tope de la pila en la locación reservada. En 1 esta ED y en 2 PR, no hay this ni parametros
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lprintCln@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintC@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintBln@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintI@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintIln@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintSln@String@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro que es una referencia al String en la heap
SPRINT
PRNLN
STOREFP
RET 1

lprintB@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintS@String@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro que es una referencia al String en la heap
SPRINT
STOREFP
RET 1

lprintln@@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lSystem@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila



