.CODE

PUSH simple_heap_init 
CALL
PUSH lmain@@Init
CALL
HALT

simple_heap_init: 
RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP	; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP	; hl
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro



.DATA
VT_A1: NOP

.CODE
lA1@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_A: DW lmet3A@@A,lmet1A@@A,lmet2A@@A

.CODE
lmet3A@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en la unidad al hacer return
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_A ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lA@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 4 ; Colocamos el valor de la expresion en la locacion reservada para el retorno
STOREFP ; Actualizamos el FP para que apunte al RA del llamador
RET 1 ; Retornamos de la unidad liberando n lugares en la pila
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet1A@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 5 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet2A@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 7 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lA@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Init: NOP

.CODE
lmain@@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v1
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_A ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lA@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 0 ; almaceno el valor de la expresion en la variable local v1
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v2
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_B ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lB@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE -1 ; almaceno el valor de la expresion en la variable local v2
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v3
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_B ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lB@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE -2 ; almaceno el valor de la expresion en la variable local v3
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v4
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_C ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lC@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE -3 ; almaceno el valor de la expresion en la variable local v4
LOAD 0 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 1 ; Cargo el metodo con su offset en la VT
CALL
LOAD 0 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD -1 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD 0 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD -1 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD -2 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 3 ; Cargo el metodo con su offset en la VT
CALL
RMEM 1 ; Reservamos un lugar para declaracion de la variable local s
LOAD -4 ; Apilo el valor de la variable local o parametro
POP ; Descartamos el valor de la variable cargado con LOAD anteriormente ya que no lo necesitamos para hacer la llamada estatica
PUSH lprintln@@System ; Pongo la etiqueta del metodo
CALL
LOAD -4 ; Apilo el valor de la variable local o parametro
POP ; Descartamos el valor de la variable cargado con LOAD anteriormente ya que no lo necesitamos para hacer la llamada estatica
PUSH 's' ; Apilo un literal caracter
PUSH lprintCln@char@System ; Pongo la etiqueta del metodo
CALL
LOAD -4 ; Apilo el valor de la variable local o parametro
POP ; Descartamos el valor de la variable cargado con LOAD anteriormente ya que no lo necesitamos para hacer la llamada estatica
PUSH lprintln@@System ; Pongo la etiqueta del metodo
CALL
LOAD -3 ; Apilo el valor de la variable local o parametro
STORE 0 ; Guardo el valor de la expresión en la variable
LOAD 0 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD 0 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
LOAD -3 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 6 ; Cargo el metodo con su offset en la VT
CALL
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v5
LOAD -3 ; Apilo el valor de la variable local o parametro
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 6 ; Cargo el metodo con su offset en la VT
CALL
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
RMEM 1 ; Reservo un lugar para el valor de retorno del metodo
SWAP ; Pongo this en el tope de la pila
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 5 ; Cargo el metodo con su offset en la VT
CALL
STORE -5 ; almaceno el valor de la expresion en la variable local v5
LOAD -5 ; Apilo el valor de la variable local o parametro
DUP ; Duplico this para no perderlo al hacer LOADREF
LOADREF 0 ; Cargo la VT
LOADREF 3 ; Cargo el metodo con su offset en la VT
CALL
FMEM 6 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lInit@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_B: DW lmet3A@@B,lmet1A@@A,lmet2A@@B,lmet1B@@B,lmet2B@@B,lmet3B@@B

.CODE
lmet3A@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en la unidad al hacer return
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_B ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lB@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 4 ; Colocamos el valor de la expresion en la locacion reservada para el retorno
STOREFP ; Actualizamos el FP para que apunte al RA del llamador
RET 1 ; Retornamos de la unidad liberando n lugares en la pila
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet1B@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 9 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet2B@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 11 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet3B@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en la unidad al hacer return
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_C ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lC@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 4 ; Colocamos el valor de la expresion en la locacion reservada para el retorno
STOREFP ; Actualizamos el FP para que apunte al RA del llamador
RET 1 ; Retornamos de la unidad liberando n lugares en la pila
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet2A@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 13 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lB@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_C: DW lmet3A@@B,lmet1A@@A,lmet2A@@C,lmet1B@@C,lmet2B@@B,lmet3B@@B,lmet1C@@C

.CODE
lmet1B@@C:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 15 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet1C@@C:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en la unidad al hacer return
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 1 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_C ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lC@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
STORE 4 ; Colocamos el valor de la expresion en la locacion reservada para el retorno
STOREFP ; Actualizamos el FP para que apunte al RA del llamador
RET 1 ; Retornamos de la unidad liberando n lugares en la pila
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet2A@@C:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 17 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lC@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Object: NOP

.CODE
ldebugPrint@int@Object:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lObject@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_System: NOP

.CODE
lread@@System:
LOADFP
LOADSP
STOREFP
READ    ; Lectura de un valor entero
STORE 3 ; Ponemos el tope de la pila en la locación reservada. En 1 esta ED y en 2 PR, no hay this ni parametros
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lprintCln@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintC@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintBln@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintI@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintIln@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintSln@String@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1

lprintB@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintS@String@System:
LOADFP
LOADSP
STOREFP
STOREFP
RET 1

lprintln@@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lSystem@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


