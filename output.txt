.CODE

PUSH simple_heap_init 
CALL
PUSH lmain@@Init
CALL
HALT

simple_heap_init: 
RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP	; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP	; hl
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro



.DATA
VT_A1: NOP

.CODE
lA1@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_A: NOP

.CODE
lA@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Init: NOP

.CODE
lmain@@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v1
PUSH 5 ; Apilo un literal entero
STORE 0 ; almaceno el valor de la expresion en la variable local v1
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v2
PUSH 1 ; Apilo true
STORE -1 ; almaceno el valor de la expresion en la variable local v2
PUSH 1 ; Apilo true
BF l_finIf0
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v3
PUSH 3 ; Apilo un literal entero
STORE -2 ; almaceno el valor de la expresion en la variable local v3
LOAD -2 ; Apilo el valor de la variable local o parametro
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
LOAD 0 ; Apilo el valor de la variable local o parametro
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v4
PUSH 7 ; Apilo un literal entero
STORE -3 ; almaceno el valor de la expresion en la variable local v4
FMEM 2 ; Liberamos las variables locales utilizadas en el bloque actual
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
l_finIf0: NOP
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v3
PUSH 7 ; Apilo un literal entero
STORE -2 ; almaceno el valor de la expresion en la variable local v3
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v4
PUSH 9 ; Apilo un literal entero
STORE -3 ; almaceno el valor de la expresion en la variable local v4
PUSH 0 ; Apilo false
BF l_else1
PUSH 999 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
PUSH 999 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf1
l_else1:
LOAD -2 ; Apilo el valor de la variable local o parametro
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf1
l_finIf1: NOP
PUSH 1 ; Apilo true
BF l_else2
PUSH 0 ; Apilo false
BF l_else3
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v5
JUMP l_finIf3
l_else3:
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v6
FMEM 1 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf3
l_finIf3: NOP
JUMP l_finIf2
l_else2:
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v5
PUSH 9 ; Apilo un literal entero
STORE -4 ; almaceno el valor de la expresion en la variable local v5
PUSH 999 ; Apilo un literal entero
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 1 ; Liberamos las variables locales utilizadas en el bloque actual
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf2
l_finIf2: NOP
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v5
PUSH 9 ; Apilo un literal entero
STORE -4 ; almaceno el valor de la expresion en la variable local v5
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v6
PUSH 13 ; Apilo un literal entero
STORE -5 ; almaceno el valor de la expresion en la variable local v6
PUSH 1 ; Apilo true
BF l_else4
RMEM 1 ; Reservamos un lugar para declaracion de la variable local v7
PUSH 11 ; Apilo un literal entero
STORE -6 ; almaceno el valor de la expresion en la variable local v7
PUSH 1 ; Apilo true
BF l_finIf5
LOAD -4 ; Apilo el valor de la variable local o parametro
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
l_finIf5: NOP
PUSH 0 ; Apilo false
BF l_else6
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf6
l_else6:
LOAD -5 ; Apilo el valor de la variable local o parametro
LOAD -6 ; Apilo el valor de la variable local o parametro
ADD
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf6
l_finIf6: NOP
FMEM 1 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf4
l_else4:
LOAD -5 ; Apilo el valor de la variable local o parametro
PUSH ldebugPrint@int@Object ; Pongo la etiqueta del metodo
CALL
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
JUMP l_finIf4
l_finIf4: NOP
FMEM 6 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lInit@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_B: NOP

.CODE
lB@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_C: NOP

.CODE
lC@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Object: NOP

.CODE
ldebugPrint@int@Object:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lObject@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_System: NOP

.CODE
lread@@System:
LOADFP
LOADSP
STOREFP
READ    ; Lectura de un valor entero
STORE 3 ; Ponemos el tope de la pila en la locación reservada. En 1 esta ED y en 2 PR, no hay this ni parametros
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lprintCln@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintC@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintBln@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintI@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintIln@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintSln@String@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1

lprintB@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintS@String@System:
LOADFP
LOADSP
STOREFP
STOREFP
RET 1

lprintln@@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lSystem@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas en el bloque actual
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


