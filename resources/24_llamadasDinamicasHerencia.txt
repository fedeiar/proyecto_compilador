.CODE

PUSH simple_heap_init 
CALL
PUSH lmain@@Init
CALL
HALT

simple_heap_init: 
RET 0 ; Retorna inmediatamente

simple_malloc:
LOADFP	; Inicialización unidad
LOADSP
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP	; hl
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro



.DATA
VT_A: DW lmet1@@A,lmet2@@A,lmet5@@A

.CODE
lmet1@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 20 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y al atributo en tope - 1
STOREREF 2 ; Guardo el valor de la expresión en el atributo
LOAD 3 ; Apilo this en la pila
LOADREF 2 ; Apilo el valor del atributo en la pila
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet2@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 777 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet4@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 888 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lmet3@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 40 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lmet5@@A:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 60 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lA@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 5 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y al atributo en tope - 1
STOREREF 1 ; Guardo el valor de la expresión en el atributo
PUSH 8 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y al atributo en tope - 1
STOREREF 2 ; Guardo el valor de la expresión en el atributo
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Init: NOP

.CODE
lmain@@Init:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
RMEM 1 ; Reservamos un lugar para declaracion de variable local
PUSH 7 ; Apilo un literal entero
STORE 0 ; almaceno el valor de la expresion en la variable local
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 3 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_A ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lA@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
POP ; La llamada devolvio un valor que no fue asignado en ninguna variable, debe descartarse para no afectar el .STACK
RMEM 1 ; Reservamos memoria para la referencia al CIR del objeto que crearemos
PUSH 5 ; Apilamos la cant. de vars. de instancia del CIR  + 1 de la referencia a la VT para el parametro del malloc
PUSH simple_malloc ; Apliamos la direccion de rutina para alojar memoria en el heap
CALL
DUP ; Para no perder la referencia al nuevo CIR cuando hagamos STOREREF para asociarle la VT
PUSH VT_B ; apilamos la direccion del comienzo de la VT
STOREREF 0 ; Guardamos la referencia a la VT en el CIR que creamos (siempre es en offset 0)
DUP ; Duplicamos la referencia al objeto. Esta ref sera el this del RA del constructor
PUSH lB@@ ; Apilamos la direccion del constructor que se determina en tiempo de compilacion
CALL
POP ; La llamada devolvio un valor que no fue asignado en ninguna variable, debe descartarse para no afectar el .STACK
FMEM 1 ; Liberamos las variables locales utilizadas
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lInit@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_B: DW lmet1@@A,lmet2@@B,lmet5@@A

.CODE
lmet2@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
LOAD 3 ; Apilo this en la pila
LOADREF 4 ; Apilo el valor del atributo en la pila
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila

lmet4@@B:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 50 ; Apilo un literal entero
PUSH ldebugPrint@int@Object
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 0 ; Retorna de la unidad liberando n lugares en la pila

lB@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
PUSH 10 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y al atributo en tope - 1
STOREREF 1 ; Guardo el valor de la expresión en el atributo
PUSH 30 ; Apilo un literal entero
LOAD 3 ; Apilo this en la pila
SWAP ; Pongo el valor de la expresion a asignar en el tope, y al atributo en tope - 1
STOREREF 4 ; Guardo el valor de la expresión en el atributo
LOAD 3 ; Apilo this en la pila
LOADREF 1 ; Apilo el valor del atributo en la pila
PUSH ldebugPrint@int@Object
CALL
LOAD 3
DUP
LOADREF 0 ; Cargo la VT
LOADREF 0 ; Cargo el metodo con su offset en la VT
CALL
LOAD 3
DUP
LOADREF 0 ; Cargo la VT
LOADREF 1 ; Cargo el metodo con su offset en la VT
CALL
PUSH lmet3@@A
CALL
PUSH lmet4@@B
CALL
LOAD 3
DUP
LOADREF 0 ; Cargo la VT
LOADREF 2 ; Cargo el metodo con su offset en la VT
CALL
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_Object: NOP

.CODE
ldebugPrint@int@Object:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lObject@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


.DATA
VT_System: NOP

.CODE
lread@@System:
LOADFP
LOADSP
STOREFP
READ    ; Lectura de un valor entero
STORE 3 ; Ponemos el tope de la pila en la locación reservada. En 1 esta ED y en 2 PR, no hay this ni parametros
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lprintCln@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintC@char@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
CPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintBln@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintI@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintIln@int@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
IPRINT
PRNLN
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintSln@String@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1

lprintB@boolean@System:
LOADFP
LOADSP
STOREFP
LOAD 3 ; Cargamos el primer parametro
BPRINT
STOREFP
RET 1 ; Retornamos del metodo liberando el parametro

lprintS@String@System:
LOADFP
LOADSP
STOREFP
STOREFP
RET 1

lprintln@@System:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; +0 ya que no tiene this y no tiene parametros formales

lSystem@@:
LOADFP  ; Guarda en la pila el enlace dinámico al comienzo del RA del llamador.
LOADSP  ; Apila el lugar donde comienza el RA de la unidad llamada
STOREFP ; Actualiza el FP para que apunte al comienzo del RA de la unidad llamada.
FMEM 0 ; Liberamos las variables locales utilizadas
STOREFP
RET 1 ; Retorna de la unidad liberando n lugares en la pila


