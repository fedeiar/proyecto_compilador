// prueba genericidad
class Prueba<B<A<E,F>,H>, C<C,D>,E,F<G,H>> extends PruebaPadre<B<A<F,G<I,J>,H>,E>, C<D,E>>{
	
	
	private Class<B<A<E,F>,H>, C<C,D>,E,F<G,H>> var;
	public Class<B<A<E,F>,H>, C<C,D>,E,F<G,H>> var;
	Class<B<A<E,F>,H>, C<C,D>,E,F<G,H>> var;
	Class<A> var;

	Prueba(Class<B<A<E,F>,H>, C<C,D>,E,F<G,H>> c1, Class<A<B>, C> c2){
		Class<A> var;
		Class<A, B> var = new Class<A, B>();
		Class<A<B,C>, D<E,F>> var = new Class<A<B<F>,E>, C<D>>();
		Class<A, B> var = new Class<>();
	}

	dynamic <A<D>,B<E<G>,F>,C>Stringg met2(){
		for(Class<A<B<F>,E>, C<D<I,J>,G,H>> i = new Class<>(); i.num() < var.num; i++){
			if(c.d() < !7 + 5){
				for(Class<A<B<F>,E>, C<D<I,J>,G,H>> j : array){
					if((3 + 2 < 9) || (!new Class<>(a,3).b.num() - +this)){
						
					} else{
						if(9) 
							Class<B> var = new Class<>();
						else
							Class<C> var = new Class<A,B,C>();
					}
				}
			}
		}
	}

	
	

	


}


