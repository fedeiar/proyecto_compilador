// prueba genericidad
class Prueba<B<A<E, F>, H>, C<C, D>, E, F<G, H>> extends PruebaPadre<B<A<F,G<I,J>,H>,E>, C<D,E>>{
	
	
	private Class<A<B<C<D>>>> var1, var2;
	public Class<A, B, C, D> var;
	Class<A<B<C<D, D, D>, C, C>, B, B>, A<B<C<D>>>, A<B<C<D, D, D>, C, C>, B, B>> var1, var2;
	Class<A> var1, var2, var3;

	Prueba(Class<B<A<E,F>,H>, C<C,D>,E,F<G,H>> c1, Class<A<B>, C> c2){
		Class<A> var;
		Class<A, B> var = new Class<A, B>();
		Class<A<B,C>, D<E,F>> var = new Class<A<B<F>,E>, C<D>>();
		Class<A, B> var = new Class<>();
		(Clase<A<B<C,C>,B<C,C>>, B>) a = new B<B, C<D, E, G>>();
		a = (Clase< A<B>, A<B<B1<C1>, B2>> >) var.met();  
	}

	dynamic Stringg<A<D>,B<E<G>,F>,C> met2(Class<A<B<C>>, A<B,C,D>, A> arg){
		for(Class<A<B<F>,E>, C<D<I,J>,G,H>> i = new Class<>(); i.num() < var.num; i++){
			if(c.d() < !7 + 5){
				for(Class<A<B<F>,E>, C<D<I,J>,G,H>> j : array){
					if((3 + 2 < 9) || (!new Class<>(a,3).b.num() - +this)){
						
					} else{
						if(9) 
							Class<B> var = new Class<>();
						else
							Class<C> var = new Class<A,B,C>();
					}
				}
			}
		}
	}
}


